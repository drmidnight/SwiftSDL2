import CSDL2

let scanCodeMask:Uint32 = 1<<30

@inline(__always) 
private func scanCodeToKeyCode(_ code: UInt32) -> Int {
    return Int(code | scanCodeMask)
}

public struct KeyCode: OptionSet {
    public let rawValue : Int
    public init(rawValue: Int) {
        self.rawValue = rawValue
    }

    public static let `return`    = KeyCode(rawValue: SDLK_RETURN)
    public static let escape      = KeyCode(rawValue: SDLK_ESCAPE)
    public static let backspace   = KeyCode(rawValue: SDLK_BACKSPACE)
    public static let tab         = KeyCode(rawValue: SDLK_TAB)
    public static let space       = KeyCode(rawValue: SDLK_SPACE)
    public static let exclamation = KeyCode(rawValue: SDLK_EXCLAIM)
    public static let doubleQuote = KeyCode(rawValue: SDLK_QUOTEDBL)
    public static let hash        = KeyCode(rawValue: SDLK_HASH)
    public static let percent     = KeyCode(rawValue: SDLK_PERCENT)
    public static let dollar      = KeyCode(rawValue: SDLK_DOLLAR)
    public static let ampersand   = KeyCode(rawValue: SDLK_AMPERSAND)
    public static let singleQuote = KeyCode(rawValue: SDLK_QUOTE)
    public static let leftParen   = KeyCode(rawValue: SDLK_LEFTPAREN)
    public static let rightParen  = KeyCode(rawValue: SDLK_RIGHTPAREN)
    public static let asterix     = KeyCode(rawValue: SDLK_ASTERISK)
    public static let plus        = KeyCode(rawValue: SDLK_PLUS)
    public static let comma       = KeyCode(rawValue: SDLK_COMMA)
    public static let minus       = KeyCode(rawValue: SDLK_MINUS)
    public static let period      = KeyCode(rawValue: SDLK_PERIOD)
    public static let slash       = KeyCode(rawValue: SDLK_SLASH)

    public static let zero  = KeyCode(rawValue: SDLK_0)
    public static let one   = KeyCode(rawValue: SDLK_1)
    public static let two   = KeyCode(rawValue: SDLK_2)
    public static let three = KeyCode(rawValue: SDLK_3)
    public static let four  = KeyCode(rawValue: SDLK_4)
    public static let five  = KeyCode(rawValue: SDLK_5)
    public static let six   = KeyCode(rawValue: SDLK_6)
    public static let seven = KeyCode(rawValue: SDLK_7)
    public static let eight = KeyCode(rawValue: SDLK_8)
    public static let nine  = KeyCode(rawValue: SDLK_9)

    public static let colon        = KeyCode(rawValue: SDLK_COLON)
    public static let semiColon    = KeyCode(rawValue: SDLK_SEMICOLON)
    public static let lessThan     = KeyCode(rawValue: SDLK_LESS)
    public static let equals       = KeyCode(rawValue: SDLK_EQUALS)
    public static let greaterThan  = KeyCode(rawValue: SDLK_GREATER)
    public static let questionMark = KeyCode(rawValue: SDLK_QUESTION)
    public static let at           = KeyCode(rawValue: SDLK_AT)
    public static let leftBracket  = KeyCode(rawValue:SDLK_LEFTBRACKET)
    public static let backslash    = KeyCode(rawValue:SDLK_BACKSLASH)
    public static let rightBracket = KeyCode(rawValue:SDLK_RIGHTBRACKET)
    public static let caret        = KeyCode(rawValue:SDLK_CARET)
    public static let underscore   = KeyCode(rawValue:SDLK_UNDERSCORE)
    public static let backquote    = KeyCode(rawValue:SDLK_BACKQUOTE)

    public static let A = KeyCode(rawValue:SDLK_a)
    public static let B = KeyCode(rawValue:SDLK_b)
    public static let C = KeyCode(rawValue:SDLK_c)
    public static let D = KeyCode(rawValue:SDLK_d)
    public static let E = KeyCode(rawValue:SDLK_e)
    public static let F = KeyCode(rawValue:SDLK_f)
    public static let G = KeyCode(rawValue:SDLK_g)
    public static let H = KeyCode(rawValue:SDLK_h)
    public static let I = KeyCode(rawValue:SDLK_i)
    public static let J = KeyCode(rawValue:SDLK_j)
    public static let K = KeyCode(rawValue:SDLK_k)
    public static let L = KeyCode(rawValue:SDLK_l)
    public static let M = KeyCode(rawValue:SDLK_m)
    public static let N = KeyCode(rawValue:SDLK_n)
    public static let O = KeyCode(rawValue:SDLK_o)
    public static let P = KeyCode(rawValue:SDLK_p)
    public static let Q = KeyCode(rawValue:SDLK_q)
    public static let R = KeyCode(rawValue:SDLK_r)
    public static let S = KeyCode(rawValue:SDLK_s)
    public static let T = KeyCode(rawValue:SDLK_t)
    public static let U = KeyCode(rawValue:SDLK_u)
    public static let V = KeyCode(rawValue:SDLK_v)
    public static let W = KeyCode(rawValue:SDLK_w)
    public static let X = KeyCode(rawValue:SDLK_x)
    public static let Y = KeyCode(rawValue:SDLK_y)
    public static let Z = KeyCode(rawValue:SDLK_z)

    public static let capsLock = scanCodeToKeyCode(SDL_SCANCODE_CAPSLOCK.rawValue)

    public static let F1  = scanCodeToKeyCode(SDL_SCANCODE_F1.rawValue)
    public static let F2  = scanCodeToKeyCode(SDL_SCANCODE_F2.rawValue)
    public static let F3  = scanCodeToKeyCode(SDL_SCANCODE_F3.rawValue)
    public static let F4  = scanCodeToKeyCode(SDL_SCANCODE_F4.rawValue)
    public static let F5  = scanCodeToKeyCode(SDL_SCANCODE_F5.rawValue)
    public static let F6  = scanCodeToKeyCode(SDL_SCANCODE_F6.rawValue)
    public static let F7  = scanCodeToKeyCode(SDL_SCANCODE_F7.rawValue)
    public static let F8  = scanCodeToKeyCode(SDL_SCANCODE_F8.rawValue)
    public static let F9  = scanCodeToKeyCode(SDL_SCANCODE_F9.rawValue)
    public static let F10 = scanCodeToKeyCode(SDL_SCANCODE_F10.rawValue)
    public static let F11 = scanCodeToKeyCode(SDL_SCANCODE_F11.rawValue)
    public static let F12 = scanCodeToKeyCode(SDL_SCANCODE_F12.rawValue)

    public static let printScreen = scanCodeToKeyCode(SDL_SCANCODE_PRINTSCREEN.rawValue)
    public static let scrollLock  = scanCodeToKeyCode(SDL_SCANCODE_SCROLLLOCK.rawValue)
    public static let pause       = scanCodeToKeyCode(SDL_SCANCODE_PAUSE.rawValue)
    public static let insert      = scanCodeToKeyCode(SDL_SCANCODE_INSERT.rawValue)
    public static let home        = scanCodeToKeyCode(SDL_SCANCODE_HOME.rawValue)
    public static let pageUp      = scanCodeToKeyCode(SDL_SCANCODE_PAGEUP.rawValue)
    public static let delete      = KeyCode(rawValue:SDLK_DELETE)
    public static let end         = scanCodeToKeyCode(SDL_SCANCODE_END.rawValue)
    public static let pageDown    = scanCodeToKeyCode(SDL_SCANCODE_PAGEDOWN.rawValue)
    public static let right       = scanCodeToKeyCode(SDL_SCANCODE_RIGHT.rawValue)
    public static let left        = scanCodeToKeyCode(SDL_SCANCODE_LEFT.rawValue)
    public static let down        = scanCodeToKeyCode(SDL_SCANCODE_DOWN.rawValue)
    public static let up          = scanCodeToKeyCode(SDL_SCANCODE_UP.rawValue)

// TODO: Finish renaming
    public static let numLockClear      = scanCodeToKeyCode(SDL_SCANCODE_NUMLOCKCLEAR.rawValue)
    public static let keyPadDivide      = scanCodeToKeyCode(SDL_SCANCODE_KP_DIVIDE.rawValue)
    public static let keyPadMultiply    = scanCodeToKeyCode(SDL_SCANCODE_KP_MULTIPLY.rawValue)
    public static let keyPadMinus       = scanCodeToKeyCode(SDL_SCANCODE_KP_MINUS.rawValue)
    public static let keyPadPlus        = scanCodeToKeyCode(SDL_SCANCODE_KP_PLUS.rawValue)
    public static let keyPadEnter       = scanCodeToKeyCode(SDL_SCANCODE_KP_ENTER.rawValue)
    public static let keyPad1           = scanCodeToKeyCode(SDL_SCANCODE_KP_1.rawValue)
    public static let keyPad2           = scanCodeToKeyCode(SDL_SCANCODE_KP_2.rawValue)
    public static let keyPad3           = scanCodeToKeyCode(SDL_SCANCODE_KP_3.rawValue)
    public static let keyPad4           = scanCodeToKeyCode(SDL_SCANCODE_KP_4.rawValue)
    public static let keyPad5           = scanCodeToKeyCode(SDL_SCANCODE_KP_5.rawValue)
    public static let keyPad6           = scanCodeToKeyCode(SDL_SCANCODE_KP_6.rawValue)
    public static let keyPad7           = scanCodeToKeyCode(SDL_SCANCODE_KP_7.rawValue)
    public static let keyPad8           = scanCodeToKeyCode(SDL_SCANCODE_KP_8.rawValue)
    public static let keyPad9           = scanCodeToKeyCode(SDL_SCANCODE_KP_9.rawValue)
    public static let keyPad0           = scanCodeToKeyCode(SDL_SCANCODE_KP_0.rawValue)
    public static let keyPadPeriod      = scanCodeToKeyCode(SDL_SCANCODE_KP_PERIOD.rawValue)
    public static let keyPadEquals      = scanCodeToKeyCode(SDL_SCANCODE_KP_EQUALS.rawValue)
    public static let keyPadComma       = scanCodeToKeyCode(SDL_SCANCODE_KP_COMMA.rawValue)
    public static let keyPadEqualsAs400 = scanCodeToKeyCode(SDL_SCANCODE_KP_EQUALSAS400.rawValue)

    public static let Application = scanCodeToKeyCode(SDL_SCANCODE_APPLICATION.rawValue)
    public static let Power       = scanCodeToKeyCode(SDL_SCANCODE_POWER.rawValue)
    public static let F13         = scanCodeToKeyCode(SDL_SCANCODE_F13.rawValue)
    public static let F14         = scanCodeToKeyCode(SDL_SCANCODE_F14.rawValue)
    public static let F15         = scanCodeToKeyCode(SDL_SCANCODE_F15.rawValue)
    public static let F16         = scanCodeToKeyCode(SDL_SCANCODE_F16.rawValue)
    public static let F17         = scanCodeToKeyCode(SDL_SCANCODE_F17.rawValue)
    public static let F18         = scanCodeToKeyCode(SDL_SCANCODE_F18.rawValue)
    public static let F19         = scanCodeToKeyCode(SDL_SCANCODE_F19.rawValue)
    public static let F20         = scanCodeToKeyCode(SDL_SCANCODE_F20.rawValue)
    public static let F21         = scanCodeToKeyCode(SDL_SCANCODE_F21.rawValue)
    public static let F22         = scanCodeToKeyCode(SDL_SCANCODE_F22.rawValue)
    public static let F23         = scanCodeToKeyCode(SDL_SCANCODE_F23.rawValue)
    public static let F24         = scanCodeToKeyCode(SDL_SCANCODE_F24.rawValue)
    public static let execute     = scanCodeToKeyCode(SDL_SCANCODE_EXECUTE.rawValue)
    public static let help        = scanCodeToKeyCode(SDL_SCANCODE_HELP.rawValue)
    public static let menu        = scanCodeToKeyCode(SDL_SCANCODE_MENU.rawValue)
    public static let select      = scanCodeToKeyCode(SDL_SCANCODE_SELECT.rawValue)
    public static let stop        = scanCodeToKeyCode(SDL_SCANCODE_STOP.rawValue)
    public static let again       = scanCodeToKeyCode(SDL_SCANCODE_AGAIN.rawValue)
    public static let undo        = scanCodeToKeyCode(SDL_SCANCODE_UNDO.rawValue)
    public static let cut         = scanCodeToKeyCode(SDL_SCANCODE_CUT.rawValue)
    public static let copy        = scanCodeToKeyCode(SDL_SCANCODE_COPY.rawValue)
    public static let paste       = scanCodeToKeyCode(SDL_SCANCODE_PASTE.rawValue)
    public static let find        = scanCodeToKeyCode(SDL_SCANCODE_FIND.rawValue)
    public static let mute        = scanCodeToKeyCode(SDL_SCANCODE_MUTE.rawValue)
    public static let volumeUp    = scanCodeToKeyCode(SDL_SCANCODE_VOLUMEUP.rawValue)
    public static let volumeDown  = scanCodeToKeyCode(SDL_SCANCODE_VOLUMEDOWN.rawValue)


    public static let alterase   = scanCodeToKeyCode(SDL_SCANCODE_ALTERASE.rawValue)
    public static let sysreq     = scanCodeToKeyCode(SDL_SCANCODE_SYSREQ.rawValue)
    public static let cancel     = scanCodeToKeyCode(SDL_SCANCODE_CANCEL.rawValue)
    public static let clear      = scanCodeToKeyCode(SDL_SCANCODE_CLEAR.rawValue)
    public static let prior      = scanCodeToKeyCode(SDL_SCANCODE_PRIOR.rawValue)
    public static let return2    = scanCodeToKeyCode(SDL_SCANCODE_RETURN2.rawValue)
    public static let separator  = scanCodeToKeyCode(SDL_SCANCODE_SEPARATOR.rawValue)
    public static let out        = scanCodeToKeyCode(SDL_SCANCODE_OUT.rawValue)
    public static let oper       = scanCodeToKeyCode(SDL_SCANCODE_OPER.rawValue)
    public static let clearagain = scanCodeToKeyCode(SDL_SCANCODE_CLEARAGAIN.rawValue)
    public static let crsel      = scanCodeToKeyCode(SDL_SCANCODE_CRSEL.rawValue)
    public static let exsel      = scanCodeToKeyCode(SDL_SCANCODE_EXSEL.rawValue)

    public static let keyPad00                = scanCodeToKeyCode(SDL_SCANCODE_KP_00.rawValue)
    public static let keyPad000               = scanCodeToKeyCode(SDL_SCANCODE_KP_000.rawValue)
    public static let thousandsSeparator      = scanCodeToKeyCode(SDL_SCANCODE_THOUSANDSSEPARATOR.rawValue)
    public static let decimalSeparator        = scanCodeToKeyCode(SDL_SCANCODE_DECIMALSEPARATOR.rawValue)
    public static let currencyUnit            = scanCodeToKeyCode(SDL_SCANCODE_CURRENCYUNIT.rawValue)
    public static let currencySubunit         = scanCodeToKeyCode(SDL_SCANCODE_CURRENCYSUBUNIT.rawValue)
    public static let keyPadLeftParen         = scanCodeToKeyCode(SDL_SCANCODE_KP_LEFTPAREN.rawValue)
    public static let keyPadRightParen        = scanCodeToKeyCode(SDL_SCANCODE_KP_RIGHTPAREN.rawValue)
    public static let keyPadLeftBrace         = scanCodeToKeyCode(SDL_SCANCODE_KP_LEFTBRACE.rawValue)
    public static let keyPadRightBrace        = scanCodeToKeyCode(SDL_SCANCODE_KP_RIGHTBRACE.rawValue)
    public static let keyPadTab               = scanCodeToKeyCode(SDL_SCANCODE_KP_TAB.rawValue)
    public static let keyPadBackspace         = scanCodeToKeyCode(SDL_SCANCODE_KP_BACKSPACE.rawValue)
    public static let keyPadA                 = scanCodeToKeyCode(SDL_SCANCODE_KP_A.rawValue)
    public static let keyPadB                 = scanCodeToKeyCode(SDL_SCANCODE_KP_B.rawValue)
    public static let keyPadC                 = scanCodeToKeyCode(SDL_SCANCODE_KP_C.rawValue)
    public static let keyPadD                 = scanCodeToKeyCode(SDL_SCANCODE_KP_D.rawValue)
    public static let keyPadE                 = scanCodeToKeyCode(SDL_SCANCODE_KP_E.rawValue)
    public static let keyPadF                 = scanCodeToKeyCode(SDL_SCANCODE_KP_F.rawValue)
    public static let keyPadXor               = scanCodeToKeyCode(SDL_SCANCODE_KP_XOR.rawValue)
    public static let keyPadPower             = scanCodeToKeyCode(SDL_SCANCODE_KP_POWER.rawValue)
    public static let keyPadPercentT          = scanCodeToKeyCode(SDL_SCANCODE_KP_PERCENT.rawValue)
    public static let keyPadLess              = scanCodeToKeyCode(SDL_SCANCODE_KP_LESS.rawValue)
    public static let keyPadGreater           = scanCodeToKeyCode(SDL_SCANCODE_KP_GREATER.rawValue)
    public static let keyPadAmpersand         = scanCodeToKeyCode(SDL_SCANCODE_KP_AMPERSAND.rawValue)
    public static let keyPadDoubleAmpersand   = scanCodeToKeyCode(SDL_SCANCODE_KP_DBLAMPERSAND.rawValue)
    public static let keyPadVerticalBar       = scanCodeToKeyCode(SDL_SCANCODE_KP_VERTICALBAR.rawValue)
    public static let keyPadDoubleVerticalBar = scanCodeToKeyCode(SDL_SCANCODE_KP_DBLVERTICALBAR.rawValue)
    public static let keyPadColon             = scanCodeToKeyCode(SDL_SCANCODE_KP_COLON.rawValue)
    public static let keyPadHash              = scanCodeToKeyCode(SDL_SCANCODE_KP_HASH.rawValue)
    public static let keyPadSpace             = scanCodeToKeyCode(SDL_SCANCODE_KP_SPACE.rawValue)
    public static let keyPadAt                = scanCodeToKeyCode(SDL_SCANCODE_KP_AT.rawValue)
    public static let keyPadExclamation       = scanCodeToKeyCode(SDL_SCANCODE_KP_EXCLAM.rawValue)
    public static let keyPadMemStore          = scanCodeToKeyCode(SDL_SCANCODE_KP_MEMSTORE.rawValue)
    public static let keyPadMemRecalL         = scanCodeToKeyCode(SDL_SCANCODE_KP_MEMRECALL.rawValue)
    public static let keyPadMemClear          = scanCodeToKeyCode(SDL_SCANCODE_KP_MEMCLEAR.rawValue)
    public static let keyPadMemAdd            = scanCodeToKeyCode(SDL_SCANCODE_KP_MEMADD.rawValue)
    public static let keyPadMemSubtract       = scanCodeToKeyCode(SDL_SCANCODE_KP_MEMSUBTRACT.rawValue)
    public static let keyPadMemMultiply       = scanCodeToKeyCode(SDL_SCANCODE_KP_MEMMULTIPLY.rawValue)
    public static let keyPadMemDivide         = scanCodeToKeyCode(SDL_SCANCODE_KP_MEMDIVIDE.rawValue)
    public static let keyPadPlusMinus         = scanCodeToKeyCode(SDL_SCANCODE_KP_PLUSMINUS.rawValue)
    public static let keyPadClear             = scanCodeToKeyCode(SDL_SCANCODE_KP_CLEAR.rawValue)
    public static let keyPadClearEntry        = scanCodeToKeyCode(SDL_SCANCODE_KP_CLEARENTRY.rawValue)
    public static let keyPadBinary            = scanCodeToKeyCode(SDL_SCANCODE_KP_BINARY.rawValue)
    public static let keyPadOctal             = scanCodeToKeyCode(SDL_SCANCODE_KP_OCTAL.rawValue)
    public static let keyPadDecimal           = scanCodeToKeyCode(SDL_SCANCODE_KP_DECIMAL.rawValue)
    public static let keyPadHexaDecimal       = scanCodeToKeyCode(SDL_SCANCODE_KP_HEXADECIMAL.rawValue)

    public static let leftCtrl   = scanCodeToKeyCode(SDL_SCANCODE_LCTRL.rawValue)
    public static let leftShift  = scanCodeToKeyCode(SDL_SCANCODE_LSHIFT.rawValue)
    public static let leftAlt    = scanCodeToKeyCode(SDL_SCANCODE_LALT.rawValue)
    public static let leftGUI    = scanCodeToKeyCode(SDL_SCANCODE_LGUI.rawValue)
    public static let rightCtrl  = scanCodeToKeyCode(SDL_SCANCODE_RCTRL.rawValue)
    public static let rightShift = scanCodeToKeyCode(SDL_SCANCODE_RSHIFT.rawValue)
    public static let rightAlt   = scanCodeToKeyCode(SDL_SCANCODE_RALT.rawValue)
    public static let rightGUI   = scanCodeToKeyCode(SDL_SCANCODE_RGUI.rawValue)

    public static let mode = scanCodeToKeyCode(SDL_SCANCODE_MODE.rawValue)

    public static let audioNext   = scanCodeToKeyCode(SDL_SCANCODE_AUDIONEXT.rawValue)
    public static let audioPrev   = scanCodeToKeyCode(SDL_SCANCODE_AUDIOPREV.rawValue)
    public static let audioStop   = scanCodeToKeyCode(SDL_SCANCODE_AUDIOSTOP.rawValue)
    public static let audioPlay   = scanCodeToKeyCode(SDL_SCANCODE_AUDIOPLAY.rawValue)
    public static let audioMute   = scanCodeToKeyCode(SDL_SCANCODE_AUDIOMUTE.rawValue)
    public static let mediaSelect = scanCodeToKeyCode(SDL_SCANCODE_MEDIASELECT.rawValue)
    public static let www         = scanCodeToKeyCode(SDL_SCANCODE_WWW.rawValue)
    public static let mail        = scanCodeToKeyCode(SDL_SCANCODE_MAIL.rawValue)
    public static let calculator  = scanCodeToKeyCode(SDL_SCANCODE_CALCULATOR.rawValue)
    public static let computer    = scanCodeToKeyCode(SDL_SCANCODE_COMPUTER.rawValue)
    public static let acSearch    = scanCodeToKeyCode(SDL_SCANCODE_AC_SEARCH.rawValue)
    public static let acHome      = scanCodeToKeyCode(SDL_SCANCODE_AC_HOME.rawValue)
    public static let acBack      = scanCodeToKeyCode(SDL_SCANCODE_AC_BACK.rawValue)
    public static let acForward   = scanCodeToKeyCode(SDL_SCANCODE_AC_FORWARD.rawValue)
    public static let acStop      = scanCodeToKeyCode(SDL_SCANCODE_AC_STOP.rawValue)
    public static let acRefresh   = scanCodeToKeyCode(SDL_SCANCODE_AC_REFRESH.rawValue)
    public static let acBookmarks = scanCodeToKeyCode(SDL_SCANCODE_AC_BOOKMARKS.rawValue)

    public static let brightnessDown = scanCodeToKeyCode(SDL_SCANCODE_BRIGHTNESSDOWN.rawValue)
    public static let brightnessUp   = scanCodeToKeyCode(SDL_SCANCODE_BRIGHTNESSUP.rawValue)
    public static let displaySwitch  = scanCodeToKeyCode(SDL_SCANCODE_DISPLAYSWITCH.rawValue)
    public static let illumToggle    = scanCodeToKeyCode(SDL_SCANCODE_KBDILLUMTOGGLE.rawValue)
    public static let illumDown      = scanCodeToKeyCode(SDL_SCANCODE_KBDILLUMDOWN.rawValue)
    public static let illumUp        = scanCodeToKeyCode(SDL_SCANCODE_KBDILLUMUP.rawValue)
    public static let eject          = scanCodeToKeyCode(SDL_SCANCODE_EJECT.rawValue)
    public static let sleep          = scanCodeToKeyCode(SDL_SCANCODE_SLEEP.rawValue)
    public static let app1           = scanCodeToKeyCode(SDL_SCANCODE_APP1.rawValue)
    public static let app2           = scanCodeToKeyCode(SDL_SCANCODE_APP2.rawValue)

    public static let audioRewind      = scanCodeToKeyCode(SDL_SCANCODE_AUDIOREWIND.rawValue)
    public static let audioFastForward = scanCodeToKeyCode(SDL_SCANCODE_AUDIOFASTFORWARD.rawValue)
}

public struct KeyMod: OptionSet {
    public let rawValue : UInt32
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }

    public static let none       = KeyMod(rawValue: KMOD_NONE.rawValue)
    public static let leftShift  = KeyMod(rawValue: KMOD_LSHIFT.rawValue)
    public static let rightShift = KeyMod(rawValue: KMOD_RSHIFT.rawValue)
    public static let leftCtrl   = KeyMod(rawValue: KMOD_LCTRL.rawValue)
    public static let rightCtrl  = KeyMod(rawValue: KMOD_RCTRL.rawValue)
    public static let leftAlt    = KeyMod(rawValue: KMOD_LALT.rawValue)
    public static let rightAlt   = KeyMod(rawValue: KMOD_RALT.rawValue)
    public static let leftGUI    = KeyMod(rawValue: KMOD_LGUI.rawValue)
    public static let rightGUI   = KeyMod(rawValue: KMOD_RGUI.rawValue)
    public static let numLock    = KeyMod(rawValue: KMOD_NUM.rawValue)
    public static let capsLock   = KeyMod(rawValue: KMOD_CAPS.rawValue)
    public static let mode       = KeyMod(rawValue: KMOD_MODE.rawValue)
    public static let reserved   = KeyMod(rawValue: KMOD_RESERVED.rawValue)
    
    public static let ctrl       = KeyMod(rawValue: KMOD_LCTRL.rawValue | KMOD_RCTRL.rawValue)
    public static let shift      = KeyMod(rawValue: KMOD_LSHIFT.rawValue | KMOD_RSHIFT.rawValue)
    public static let alt        = KeyMod(rawValue: KMOD_LALT.rawValue | KMOD_RALT.rawValue)
    public static let GUI        = KeyMod(rawValue: KMOD_LGUI.rawValue | KMOD_RGUI.rawValue)

}

